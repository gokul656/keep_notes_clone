package com.malware.notes.service;

import com.malware.notes.RESPONSE;
import com.malware.notes.exception.SpringAuthException;
import com.malware.notes.model.CustomResponse;
import com.malware.notes.model.User;
import com.malware.notes.repository.UserCollectionRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Calendar;
import java.util.Date;
import java.util.UUID;
import java.util.List;

import static com.malware.notes.Constant.*;

@Service
public class UserService {

    @Autowired
    UserCollectionRepo userCollectionRepo;

    CustomResponse customResponse;

    public ResponseEntity<?> createAccount(User user){

        if(user.getEmail() != null && user.getPassword() != null){
            if(userCollectionRepo.findByEmail(user.getEmail()) ==  null){
                if(user.getPassword().length() >= 6) {
                    user.setUid(UUID.randomUUID().toString());
                    user.setPassword(encode(user.getPassword()));
                    userCollectionRepo.save(user);

                    customResponse = new CustomResponse(RESPONSE.ACCEPTED.name(), SIGNIN_SUCCESS, HttpStatus.OK.value(), HttpStatus.OK, getDateTime());
                    return ResponseEntity.ok(customResponse);
                }
                customResponse = new CustomResponse(RESPONSE.INVALID_PASSWORD.name(), SIGNUP_FAILED, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST, getDateTime());
                return ResponseEntity.badRequest().body(customResponse);
            }
            customResponse = new CustomResponse(RESPONSE.USER_ALREADY_PRESENT.name(), SIGNUP_FAILED, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST, getDateTime());
            return ResponseEntity.badRequest().body(customResponse);
        }
        customResponse = new CustomResponse(RESPONSE.INCORRECT_USERNAME_OR_PASSWORD.name(), SIGNUP_FAILED, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST, getDateTime());
        return ResponseEntity.badRequest().body(customResponse);
    }

    public ResponseEntity<?> login(User user) {
        if (user.getEmail() != null && user.getPassword() != null) {
            User currentUser = userCollectionRepo.findByEmail(user.getEmail());
            if (currentUser != null) {
                System.out.println(encode(user.getPassword()) + "::::" + currentUser.getPassword());
                if (encode(user.getPassword()).equals(currentUser.getPassword())) {
                    customResponse = new CustomResponse(currentUser.getUid(), HttpStatus.OK.value(), HttpStatus.OK, getDateTime());
                    return ResponseEntity.ok(customResponse);
                }
                customResponse = new CustomResponse(RESPONSE.INCORRECT_USERNAME_OR_PASSWORD.name(), SIGNIN_FAILED, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST, getDateTime());
                return ResponseEntity.badRequest().body(customResponse);
            }
            customResponse = new CustomResponse(RESPONSE.USERNAME_NOT_FOUND.name(), SIGNIN_FAILED, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST, getDateTime());
            return ResponseEntity.badRequest().body(customResponse);
        }
        customResponse = new CustomResponse(RESPONSE.USERNAME_NOT_FOUND.name(), SIGNIN_FAILED, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST, getDateTime());
        return ResponseEntity.badRequest().body(customResponse);
    }

    public List<User> getAllUser(){
        return userCollectionRepo.findAll();
    }

    public String encode(String password){
        return new BCryptPasswordEncoder().encode(password);
    }

    public Date getDateTime(){
        return Calendar.getInstance().getTime();
    }
}

